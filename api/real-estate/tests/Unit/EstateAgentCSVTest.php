<?php

namespace Tests\Unit;

use App\Repositories\EstateAgentCSVRepository;
use App\Services\NameProcessorService;
use Illuminate\Contracts\Console\Kernel;
use PHPUnit\Framework\TestCase;

class EstateAgentCSVTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $app = require __DIR__.'/../../bootstrap/app.php';
        $app->make(Kernel::class)->bootstrap();
    }

    public function test_estate_agent_csv_get_all(): void
    {
        $input = 'example.csv';
        $expected = [
            [
                'title' => 'Mr',
                'first_name' => 'John',
                'initial' => null,
                'last_name' => 'Smith'
            ],
            [
                'title' => 'Mrs',
                'first_name' => 'Jane',
                'initial' => null,
                'last_name' => 'Smith'
            ],
            [
                'title' => 'Mister',
                'first_name' => 'John',
                'initial' => null,
                'last_name' => 'Doe'
            ],
            [
                'title' => 'Mr',
                'first_name' => 'Bob',
                'initial' => null,
                'last_name' => 'Lawblaw'
            ],
            [
                'title' => 'Mr',
                'first_name' => null,
                'initial' => null,
                'last_name' => 'Smith'
            ],
            [
                'title' => 'Mrs',
                'first_name' => null,
                'initial' => null,
                'last_name' => 'Smith'
            ],
            [
                'title' => 'Mr',
                'first_name' => 'Craig',
                'initial' => null,
                'last_name' => 'Charles'
            ],
            [
                'title' => 'Mr',
                'first_name' => null,
                'initial' => 'M',
                'last_name' => 'Mackie'
            ],
            [
                'title' => 'Mrs',
                'first_name' => 'Jane',
                'initial' => null,
                'last_name' => 'McMaster'
            ],
            [
                'title' => 'Mr',
                'first_name' => 'Tom',
                'initial' => null,
                'last_name' => 'Staff'
            ],
            [
                'title' => 'Mr',
                'first_name' => 'John',
                'initial' => null,
                'last_name' => 'Doe'
            ],
            [
                'title' => 'Dr',
                'first_name' => null,
                'initial' => 'P',
                'last_name' => 'Gunn'
            ],
            [
                'title' => 'Dr',
                'first_name' => null,
                'initial' => null,
                'last_name' => 'Bloggs'
            ],
            [
                'title' => 'Mrs',
                'first_name' => 'Joe',
                'initial' => null,
                'last_name' => 'Bloggs'
            ],
            [
                'title' => 'Ms',
                'first_name' => 'Claire',
                'initial' => null,
                'last_name' => 'Robbo'
            ],
            [
                'title' => 'Prof',
                'first_name' => 'Alex',
                'initial' => null,
                'last_name' => 'Brogan'
            ],
            [
                'title' => 'Mrs',
                'first_name' => 'Faye',
                'initial' => null,
                'last_name' => 'Hughes-Eastwood'
            ],
            [
                'title' => 'Mr',
                'first_name' => null,
                'initial' => 'F.',
                'last_name' => 'Fredrickson'
            ],
        ];
        $agents = EstateAgentCSVRepository::getAllEstateAgentCSV($input);
        $output = [];
        foreach ($agents as $agent) {
            if (NameProcessorService::hasPartner($agent[0])) {
                $partnerAgents = NameProcessorService::splitPartnerAgents($agent[0]);
                $partnerAgents = NameProcessorService::completeDataFromPartnerAgent($partnerAgents);
                $output = array_merge($output, $partnerAgents);

            } else {
                $output[] = NameProcessorService::formatEstateAgent($agent[0]);
            };
        }
        for ($i = 0; $i < count($expected); $i++) {
            $this->assertEquals($expected[$i], $output[$i]);
        }
    }
}

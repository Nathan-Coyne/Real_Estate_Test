<?php

namespace Tests\Unit;

use App\Repositories\EstateAgentCSVRepository;
use App\Services\NameProcessorService;
use Illuminate\Contracts\Console\Kernel;
use PHPUnit\Framework\TestCase;

class NameProcessorServiceTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $app = require __DIR__.'/../../bootstrap/app.php';
        $app->make(Kernel::class)->bootstrap();
    }

    public function test_can_split_name_and_title(): void
    {
        $input = 'Mr John Smith';
        $expected = [
            'title' => 'Mr',
            'first_name' => 'John',
            'initial' => null,
            'last_name' => 'Smith'
        ];

        $data = NameProcessorService::formatEstateAgent($input);
        $this->assertEquals($expected, $data);
    }

    public function test_can_detect_multiple_people(): void
    {
        $input = 'Mr and Mrs Smith';
        $this->assertTrue(NameProcessorService::hasPartner($input));
    }

    public function test_can_split_multiple_people(): void
    {
        $input = 'Mr and Mrs Smith';
        $expected = [
            ['title' => 'Mr', 'first_name' => null, 'initial' => null, 'last_name' => 'Smith'],
            ['title' => 'Mrs', 'first_name' => null, 'initial' => null, 'last_name' => 'Smith']
        ];


        $agents = NameProcessorService::splitPartnerAgents($input);
        $response = NameProcessorService::completeDataFromPartnerAgent($agents);

        $this->assertEquals($expected, $response);
    }

    public function test_can_split_name_and_initial(): void
    {
        $input = 'Mr J. Smith';
        $expected = [
            'title' => 'Mr',
            'first_name' => null,
            'initial' => 'J.',
            'last_name' => 'Smith'
        ];

        $data = NameProcessorService::formatEstateAgent($input);
        $this->assertEquals($expected, $data);
    }
}
